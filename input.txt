#ImporT >MylibrarY.h<

>StrucT< complex
{{
  >FloaT< real
  >FloaT< imag
}}

>VoiD< display (())
{{
  ->OuT<- (("Display"))
}}

>IntegeR< sum ((>IntegeR< a,, >IntegeR< b))
{{
  >IntegeR< s
  s := a + b
  ->OuT<- (("sum"))
  >BacK< s
}}

>IntegeR< ->MaiN<-(())
{{
  
  >IntegeR< num1 := 10
  >IntegeR< num2 := 3
  >IntegeR< num3
  >CharacteR< char1 := A
  >CharacteR< char2
  >LonG< lnum1 := 100000
  >LonG< lnum2
  >FloaT< f1 := 5.88
  >FloaT< f2
  >FloaT64< d1 := 1000000.87322
  >FloaT64< d2

  ->FoR<- (( num2 := 1 :: num2 < 5 :: num2 IncremenT1))
  {{

  }}

  num1 := 1
  ->WhilE<- (( num1 <= 5 ))
  {{

    ->OuT<- (("Hello World"))
    num1 IncremenT1

  }}

  ->IN<- (( num2 ))
  ->OuT<- (("Hello World\n"))

  num3 := num1 + num2
  num3 := num1 - num2
  num3 := num1 * num2
  num3 := num1 / num2
  num3 := num1 % num2

  num3 := num1 ** num2

  num3 := num1 AnD num2
  num3 := num1 OR num2
  num3 := num1 XoR num2

  num3 := NoT num1

  ->SizeoF<-((num3))

  ->-> This is a comment

  arr := >IntegeR<((2))[1,, 2]

  num1 := 10
  ->IF<- ((num1 EquaL 7))
  {{
    ->OuT<- ((7))
  }}
  ->EliF<- ((num1 < 7))
  {{
    ->OuT<- (("Less than 7\n"))
  }}
  ->ElsE<-
  {{
    ->OuT<- (("Not Found"))
  }}

  num1 := 10
  ->SwitcH<- ((num1))
  {{
    >CasE< 5::
    ((
      ->OuT<- ((5))
    ))
    >CasE< 7::
    ((
      ->OuT<- ((7))
    ))
    >DefaulT<::
    ((
      ->OuT<- (("Not Found"))
    ))
  }}

  display(())

  sum((5 ,, 7))

  >BacK< 0
  
}}
